
SOLUTION STRUCT *******************************************************************************

	Clean code with clear naming
	Comments and ReadMe
	Work with asynchronous
	HttpClient implementation and additional settings
	Work with checking of incoming parameters
	Work with dependency injection

	-------------------------------------------------------------------------------------------

	Added FluentValidation 

	Added GenerateDocumentationFile to show comments on swagger UI

	Added Exceptionhandling middleware

	Added Serilog writing file/console
CACHING *****************************************************************************************

	Added Simply MemoryCaching for httpclient response : Scrutor 

	Establish distributed caching services------------------------------------------------------


UNIT TESTING*************************************************************************************

	Added UnitTest for Controllers / Services with Moq

RESILIENT*****************************************************************************************

	Added Polly  WaitAndRetryPolicy, CircuitBreakerPolicy, FallbackPolicy

	Added AspNetCoreRateLimiting (demonstrate DDOS attack)

	!!!Throttling is a particular process of applying rate-limiting to an API endpoint.

	!!!Queues the incoming requests, then serves them to the API endpoint at a rate that the API can process gracefully.

SCALING*******************************************************************************************

	Added Redis DistributedCache

	docker activation => <projectname>.csproj.user :  <ActiveDebugProfile>Docker</ActiveDebugProfile>

TODO**********************************************************************************************
APIGateway Ocelot


JWT Token Auth
RabitMQ
AzureFunction
F5
Deploying Azure cloud
Add React UI
Add Amadeus Client
Performance metric
PostgreSQL/MongoDB
EFContext