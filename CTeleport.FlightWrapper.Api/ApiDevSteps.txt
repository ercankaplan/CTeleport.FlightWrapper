
SOLUTION STRUCT *******************************************************************************

	Clean code with clear naming
	Comments and ReadMe
	Work with asynchronous
	HttpClient implementation and additional settings
	Work with checking of incoming parameters
	Work with dependency injection

	-------------------------------------------------------------------------------------------

	Added FluentValidation 

	Added GenerateDocumentationFile to show comments on swagger UI

	Added Exceptionhandling middleware

	Added Serilog writing file/console
CACHING *****************************************************************************************

	Added Simply MemoryCaching for httpclient response : Scrutor 

	Establish distributed caching services------------------------------------------------------

	Distributed Memory Cache: 
	    The Distributed Memory Cache isn't an actual distributed cache. 
		Cached items are stored by the app instance on the server where the app is running.
		The Distributed Memory Cache is a useful implementation,
		In development and testing scenarios.
		When a single server is used in production and memory consumption isn't an issue. 
		Implementing the Distributed Memory Cache abstracts cached data storage. 
		It allows for implementing a true distributed caching solution in the future if multiple nodes or fault tolerance become necessary.
	Distributed SQL Server cache
	Distributed Redis cache
	Distributed NCache cache

	This can easily be replaced with a distributed cache like Redis by installing the AspNetCoreRateLimit.Redis package. 
	The service registration code also needs some changes to use Redis:


UNIT TESTING*************************************************************************************

	Added UnitTest for Controllers / Services with Moq

RESILIENT*****************************************************************************************

	Added Polly  WaitAndRetryPolicy, CircuitBreakerPolicy, FallbackPolicy

	Added AspNetCoreRateLimiting (demonstrate DDOS attack)

	!!!Throttling is a particular process of applying rate-limiting to an API endpoint.

	!!!Queues the incoming requests, then serves them to the API endpoint at a rate that the API can process gracefully.

SCALING*******************************************************************************************

	Added Redis DistributedCache

	docker activation => <projectname>.csproj.user :  <ActiveDebugProfile>Docker</ActiveDebugProfile>

TODO**********************************************************************************************
APIGateway Ocelot


JWT Token Auth
RabitMQ
AzureFunction
Session
F5
Deploying Azure cloud
Add React UI
Add Amadeus Client
Performance metric
PostgreSQL/MongoDB
EFContext